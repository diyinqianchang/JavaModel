

访问者模式是一个相对简单的模式。封装一些作用于某种数据结构中的各元素的操作，它可以在不改变数据结构的前提下
定义作用于这些元素的新的操作。

Visitor---抽象访问者
抽象类或者接口，声明访问者可以访问哪些元素，具体到程序中就是visit方法的参数定义

public interface IVisitor{
	
	public void visit(ConcreteElement1 el1);
	
	public void visit(ConcreteElement1 el2);
	
}



ConcreteVisitor 具体访问者
他影响访问者访问到一个类后该怎么干，要做些什么事情

public class Visitor implements IVisitor{

	public void visit(ConcreteElement1 el1){
		el1.doSomthing();
	}
	
	public void visit(ConcreteElement1 el2){
		el2.doSomthing();
	}
	

}





Element----抽象元素
接口或者抽象类，声明接收哪一类访问者访问，程序上是通过accept方法中的参数来定义的

public abstract class Element{

	public abstract void doSomething();
	
	public abstract void accept(IVisitor visitor);
}


ConcreteElement-----具体元素
实现accept方法，通常是visitor.visit(this)，基本上都形成了一种模式了

public class ConcreteElement1 extends Element{
	
	public void doSomething(){
	
	}
	
	public void accept(IVisitor visitor){
		visitor.visit(this);
	}
	
}

public class ConcreteElement2  extends Element{
	
	public void doSomething(){
	
	}
	
	public void accept(IVisitor visitor){
		visitor.visit(this);
	}
	
}

ObjectStruture  结构对象
元素产生者，一般容纳在多个不同类、不同接口的容器，如List、Set、Map等 在项目中一般很少抽象出这个角色


public class ObjectStruture{
	
	public static Element createElement(){
	
		//添加要被访问的对象
	}

}


public class Client {
	
	public static void main(String[] args) {
		
		for (Employee employee : mockEmployee()) {
//			employee.report();
			employee.accept(new Visitor());
		}
		
	}
}







